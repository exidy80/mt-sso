FROM node:12.16.1-alpine@sha256:5e1a147114839599442784549d04b45821c7b178f7fc09d4ab9853543ae1388e AS appbuild
RUN apk update
RUN apk add --no-cache build-base python3 && ln -sf python3 /usr/bin/python

RUN npm install -g npm@8.3.1 typescript@3.5.2

WORKDIR /build
# use changes to package.json to force Docker not to use the cache
# when we change our application's nodejs dependencies:
COPY package*.json ./

# install dev dependencies for building
RUN npm i

# copy the code into the image for building
COPY . ./

# compile typescript
RUN tsc

# make a 2 part Dockerfile in order reduce overall image size of the final prod image
FROM node:12.16.1-alpine@sha256:5e1a147114839599442784549d04b45821c7b178f7fc09d4ab9853543ae1388e
RUN apk update && apk upgrade && apk add curl --no-cache && apk add --no-cache build-base python3 && ln -sf python3 /usr/bin/python

# create dirs in the container & set permissions so node user can access them
RUN mkdir -p /web && chown -R node:node /web
USER node
WORKDIR /web

# copy the package.jsons to prepare for install
COPY --chown=node:node package*.json ./

# install dependencies only for prod
RUN npm i --only=production

# copy the built code from the build image into the prod image
COPY --from=appbuild --chown=node:node /build /web/

EXPOSE 1342
CMD ["node", "/web/dist/bin/main.js"]
#CMD ["tail", "-f", "/dev/null"]